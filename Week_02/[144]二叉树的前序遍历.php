<?php
//Áªô‰Ω†‰∫åÂèâÊ†ëÁöÑÊ†πËäÇÁÇπ root ÔºåËøîÂõûÂÆÉËäÇÁÇπÂÄºÁöÑ ÂâçÂ∫è ÈÅçÂéÜ„ÄÇ
//
//
//
// Á§∫‰æã 1Ôºö
//
//
//ËæìÂÖ•Ôºöroot = [1,null,2,3]
//ËæìÂá∫Ôºö[1,2,3]
//
//
// Á§∫‰æã 2Ôºö
//
//
//ËæìÂÖ•Ôºöroot = []
//ËæìÂá∫Ôºö[]
//
//
// Á§∫‰æã 3Ôºö
//
//
//ËæìÂÖ•Ôºöroot = [1]
//ËæìÂá∫Ôºö[1]
//
//
// Á§∫‰æã 4Ôºö
//
//
//ËæìÂÖ•Ôºöroot = [1,2]
//ËæìÂá∫Ôºö[1,2]
//
//
// Á§∫‰æã 5Ôºö
//
//
//ËæìÂÖ•Ôºöroot = [1,null,2]
//ËæìÂá∫Ôºö[1,2]
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// Ê†ë‰∏≠ËäÇÁÇπÊï∞ÁõÆÂú®ËåÉÂõ¥ [0, 100] ÂÜÖ
// -100 <= Node.val <= 100
//
//
//
//
// ËøõÈò∂ÔºöÈÄíÂΩíÁÆóÊ≥ïÂæàÁÆÄÂçïÔºå‰Ω†ÂèØ‰ª•ÈÄöËøáËø≠‰ª£ÁÆóÊ≥ïÂÆåÊàêÂêóÔºü
// Related Topics Ê†à Ê†ë
// üëç 453 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)

/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($val = 0, $left = null, $right = null) {
 *         $this->val = $val;
 *         $this->left = $left;
 *         $this->right = $right;
 *     }
 * }
 */
class Solution
{

    /**
     * @param TreeNode $root
     * @return array
     */
    public function preorderTraversal($root)
    {

        //Ëø≠‰ª£Ê≥ï ÈÅçÂéÜÊ†πÂ∑¶Âè≥Ê†ëÁªìÁÇπ
        if (!$root) return [];

        $res = [];
        $stack = [];

        array_push($stack, $root);
        while (count($stack)) {
            $node = $stack[count($stack) - 1];
            array_push($res, $node->val);
            array_pop($stack);
            if ($node->right) {
                array_push($stack, $node->right);
            }
            if ($node->left) {
                array_push($stack, $node->left);
            }
        }

        return $res;


        //Ëø≠‰ª£Ê≥ïÔºàÂâçÂ∫èÈÅçÂéÜÔºâ
        $res = [];
        $stack = [];
        array_push($stack, $root);
//
        while (count($stack)) {
            $top = $stack[count($stack) - 1]; //Âá∫Ê†àÔºàÂ∑¶ËäÇÁÇπÂÖàÂá∫Ê†àÔºâ
            array_pop($stack);
            array_push($res, $top->val);
            if ($top->right) { //ÂÖàÂéãÂè≥ÁªìÁÇπ
                array_push($stack, $top->right);
            }
            if ($top->left) { //ÂÜçÂéãÂ∑¶ÁªìÁÇπ
                array_push($stack, $top->left);
            }
        }
        return $res;
//        $res = [];
//      ÈÄíÂΩíÊ≥ï
//        return $this->funcTest($res, $root);
    }

    public function funcTest(&$res, $root)
    {
        if (!$root) {
            return [];
        }
        array_push($res, $root->val); //Ê†π
        $this->funcTest($res, $root->left); //Â∑¶
        $this->funcTest($res, $root->right); //Âè≥
        return $res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
